import e from"axios";import r from"axios-retry";import{stringify as t}from"qs";const a=e=>{let r={raw:"",encoded:""};e.and&&(r=(e=>{if(!e)throw new Error("invalid query");const r=[],t=[];return e.forEach((e=>{const{raw:o,encoded:n}=a(e);r.push(o),t.push(n)})),{raw:r.join("&"),encoded:t.join("&")}})(e.and),delete e.and);let o={raw:"",encoded:""};e.or&&(o=(e=>{if(!e)throw new Error("invalid query");const r=[];e.forEach((e=>{const{raw:t}=a(e);r.push(t)}));const t=new URLSearchParams;return t.set("[or]",`(${r.join(";")})`),{raw:`[or]=(${r.join(";")})`,encoded:t.toString()}})(e.or),delete e.or);const n=t(e,{encode:!1,arrayFormat:"comma"}),i=t(e,{arrayFormat:"comma"});return{raw:[n,o.raw,r.raw].filter((e=>e)).join("&"),encoded:[i,o.encoded,r.encoded].filter((e=>e)).join("&")}},o=r=>{if(!e.isAxiosError(r))throw r;const{config:t,response:a}=r;if(null==a||!a.data)throw r;const{data:o}=a,n={status:o.status,statusText:o.code,message:o.message};if(t&&(n.request={method:t.method,headers:t.headers},t.url)){const e=new URL(t.url,t.baseURL);n.request.url=e.toString()}const i=new Error;i.name=`${o.status} ${o.code}`;try{i.message=JSON.stringify(n,null,2)}catch{i.message=o.message}throw i},n=t=>{let{spaceUid:n,token:i,apiType:s="cdn",adapter:d,retryOnError:c=!0,retryLimit:p=3}=t;if(!n)throw new Error("spaceUid parameter is required.");if(!i)throw new Error("token parameter is required.");if(!["cdn","api"].includes(s))throw new Error(`apiType parameter should be set to "cdn" or "api". apiType: ${s}`);if(p>10)throw new Error("retryLimit should be a value less than or equal to 10.");const u=new URL(`https://${n}.${s}.newt.so`),w=e.create({baseURL:u.toString(),headers:{Authorization:`Bearer ${i}`},adapter:d});c&&r(w,{retries:p,retryCondition:e=>{var r,t;return 429===(null===(r=e.response)||void 0===r?void 0:r.status)||500===(null===(t=e.response)||void 0===t?void 0:t.status)},retryDelay:e=>1e3*e});const h=async e=>{let{appUid:r,modelUid:t,query:n}=e;if(!r)throw new Error("appUid parameter is required.");if(!t)throw new Error("modelUid parameter is required.");const i=new URL(`/v1/${r}/${t}`,u.toString());if(n&&Object.keys(n).length){const{encoded:e}=a(n);i.search=e}try{const{data:e}=await w.get(i.pathname+i.search);return e}catch(e){return o(e)}};return{getContents:h,getContent:async e=>{let{appUid:r,modelUid:t,contentId:n,query:i}=e;if(!r)throw new Error("appUid parameter is required.");if(!t)throw new Error("modelUid parameter is required.");if(!n)throw new Error("contentId parameter is required.");const s=new URL(`/v1/${r}/${t}/${n}`,u.toString());if(i&&Object.keys(i).length){const{encoded:e}=a(i);s.search=e}try{const{data:e}=await w.get(s.pathname+s.search);return e}catch(e){return o(e)}},getFirstContent:async e=>{let{appUid:r,modelUid:t,query:a}=e;if(a&&a.limit)throw new Error("query.limit parameter cannot have a value.");const o={...a,limit:1},{items:n}=await h({appUid:r,modelUid:t,query:o});return 0===n.length?null:n[0]},getApp:async e=>{let{appUid:r}=e;if(!r)throw new Error("appUid parameter is required.");const t=new URL(`/v1/space/apps/${r}`,u.toString());try{const{data:e}=await w.get(t.pathname);return e}catch(e){return o(e)}}}};export{n as createClient};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3dENsaWVudC5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==
