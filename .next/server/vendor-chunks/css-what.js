"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/css-what";
exports.ids = ["vendor-chunks/css-what"];
exports.modules = {

/***/ "(rsc)/./node_modules/css-what/lib/commonjs/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-what/lib/commonjs/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.stringify = exports.parse = exports.isTraversal = void 0;\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/css-what/lib/commonjs/types.js\"), exports);\nvar parse_1 = __webpack_require__(/*! ./parse */ \"(rsc)/./node_modules/css-what/lib/commonjs/parse.js\");\nObject.defineProperty(exports, \"isTraversal\", ({\n    enumerable: true,\n    get: function() {\n        return parse_1.isTraversal;\n    }\n}));\nObject.defineProperty(exports, \"parse\", ({\n    enumerable: true,\n    get: function() {\n        return parse_1.parse;\n    }\n}));\nvar stringify_1 = __webpack_require__(/*! ./stringify */ \"(rsc)/./node_modules/css-what/lib/commonjs/stringify.js\");\nObject.defineProperty(exports, \"stringify\", ({\n    enumerable: true,\n    get: function() {\n        return stringify_1.stringify;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY3NzLXdoYXQvbGliL2NvbW1vbmpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETCxpQkFBaUIsR0FBR0EsYUFBYSxHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQy9ERCxhQUFhVSxtQkFBT0EsQ0FBQyxvRUFBUyxHQUFHVDtBQUNqQyxJQUFJVSxVQUFVRCxtQkFBT0EsQ0FBQyxvRUFBUztBQUMvQnpCLCtDQUE4QztJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPYSxRQUFRRixXQUFXO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDckh4Qix5Q0FBd0M7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT2EsUUFBUUgsS0FBSztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3pHLElBQUlJLGNBQWNGLG1CQUFPQSxDQUFDLDRFQUFhO0FBQ3ZDekIsNkNBQTRDO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9jLFlBQVlMLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9jc3Mtd2hhdC9saWIvY29tbW9uanMvaW5kZXguanM/ZWJkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBleHBvcnRzLnBhcnNlID0gZXhwb3J0cy5pc1RyYXZlcnNhbCA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG52YXIgcGFyc2VfMSA9IHJlcXVpcmUoXCIuL3BhcnNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNUcmF2ZXJzYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhcnNlXzEuaXNUcmF2ZXJzYWw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFyc2VfMS5wYXJzZTsgfSB9KTtcbnZhciBzdHJpbmdpZnlfMSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0cmluZ2lmeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RyaW5naWZ5XzEuc3RyaW5naWZ5OyB9IH0pO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJzdHJpbmdpZnkiLCJwYXJzZSIsImlzVHJhdmVyc2FsIiwicmVxdWlyZSIsInBhcnNlXzEiLCJzdHJpbmdpZnlfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/css-what/lib/commonjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/css-what/lib/commonjs/parse.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-what/lib/commonjs/parse.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parse = exports.isTraversal = void 0;\nvar types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/css-what/lib/commonjs/types.js\");\nvar reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nvar reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nvar actionTypes = new Map([\n    [\n        126 /* Tilde */ ,\n        types_1.AttributeAction.Element\n    ],\n    [\n        94 /* Circumflex */ ,\n        types_1.AttributeAction.Start\n    ],\n    [\n        36 /* Dollar */ ,\n        types_1.AttributeAction.End\n    ],\n    [\n        42 /* Asterisk */ ,\n        types_1.AttributeAction.Any\n    ],\n    [\n        33 /* ExclamationMark */ ,\n        types_1.AttributeAction.Not\n    ],\n    [\n        124 /* Pipe */ ,\n        types_1.AttributeAction.Hyphen\n    ]\n]);\n// Pseudos, whose data property is parsed as well.\nvar unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\"\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */ function isTraversal(selector) {\n    switch(selector.type){\n        case types_1.SelectorType.Adjacent:\n        case types_1.SelectorType.Child:\n        case types_1.SelectorType.Descendant:\n        case types_1.SelectorType.Parent:\n        case types_1.SelectorType.Sibling:\n        case types_1.SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nexports.isTraversal = isTraversal;\nvar stripQuotesFromPseudos = new Set([\n    \"contains\",\n    \"icontains\"\n]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    var high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */  || c === 34 /* DoubleQuote */ ;\n}\nfunction isWhitespace(c) {\n    return c === 32 /* Space */  || c === 9 /* Tab */  || c === 10 /* NewLine */  || c === 12 /* FormFeed */  || c === 13 /* CarriageReturn */ ;\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */ function parse(selector) {\n    var subselects = [];\n    var endIndex = parseSelector(subselects, \"\".concat(selector), 0);\n    if (endIndex < selector.length) {\n        throw new Error(\"Unmatched selector: \".concat(selector.slice(endIndex)));\n    }\n    return subselects;\n}\nexports.parse = parse;\nfunction parseSelector(subselects, selector, selectorIndex) {\n    var tokens = [];\n    function getName(offset) {\n        var match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(\"Expected name, found \".concat(selector.slice(selectorIndex)));\n        }\n        var name = match[0];\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while(selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))){\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        var start = selectorIndex;\n        var counter = 1;\n        for(; counter > 0 && selectorIndex < selector.length; selectorIndex++){\n            if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  && !isEscaped(selectorIndex)) {\n                counter++;\n            } else if (selector.charCodeAt(selectorIndex) === 41 /* RightParenthesis */  && !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        var slashCount = 0;\n        while(selector.charCodeAt(--pos) === 92 /* BackSlash */ )slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 && tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({\n            type: type\n        });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: types_1.SelectorType.Attribute,\n            name: name,\n            action: action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\"\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */ function finalizeSubselector() {\n        if (tokens.length && tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while(selectorIndex < selector.length){\n        var firstChar = selector.charCodeAt(selectorIndex);\n        switch(firstChar){\n            // Whitespace\n            case 32 /* Space */ :\n            case 9 /* Tab */ :\n            case 10 /* NewLine */ :\n            case 12 /* FormFeed */ :\n            case 13 /* CarriageReturn */ :\n                {\n                    if (tokens.length === 0 || tokens[0].type !== types_1.SelectorType.Descendant) {\n                        ensureNotTraversal();\n                        tokens.push({\n                            type: types_1.SelectorType.Descendant\n                        });\n                    }\n                    stripWhitespace(1);\n                    break;\n                }\n            // Traversals\n            case 62 /* GreaterThan */ :\n                {\n                    addTraversal(types_1.SelectorType.Child);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 60 /* LessThan */ :\n                {\n                    addTraversal(types_1.SelectorType.Parent);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 126 /* Tilde */ :\n                {\n                    addTraversal(types_1.SelectorType.Sibling);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 43 /* Plus */ :\n                {\n                    addTraversal(types_1.SelectorType.Adjacent);\n                    stripWhitespace(1);\n                    break;\n                }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */ :\n                {\n                    addSpecialAttribute(\"class\", types_1.AttributeAction.Element);\n                    break;\n                }\n            case 35 /* Hash */ :\n                {\n                    addSpecialAttribute(\"id\", types_1.AttributeAction.Equals);\n                    break;\n                }\n            case 91 /* LeftSquareBracket */ :\n                {\n                    stripWhitespace(1);\n                    // Determine attribute name and namespace\n                    var name_1 = void 0;\n                    var namespace = null;\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ ) {\n                        // Equivalent to no namespace\n                        name_1 = getName(1);\n                    } else if (selector.startsWith(\"*|\", selectorIndex)) {\n                        namespace = \"*\";\n                        name_1 = getName(2);\n                    } else {\n                        name_1 = getName(0);\n                        if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {\n                            namespace = name_1;\n                            name_1 = getName(1);\n                        }\n                    }\n                    stripWhitespace(0);\n                    // Determine comparison operation\n                    var action = types_1.AttributeAction.Exists;\n                    var possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                    if (possibleAction) {\n                        action = possibleAction;\n                        if (selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {\n                            throw new Error(\"Expected `=`\");\n                        }\n                        stripWhitespace(2);\n                    } else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */ ) {\n                        action = types_1.AttributeAction.Equals;\n                        stripWhitespace(1);\n                    }\n                    // Determine value\n                    var value = \"\";\n                    var ignoreCase = null;\n                    if (action !== \"exists\") {\n                        if (isQuote(selector.charCodeAt(selectorIndex))) {\n                            var quote = selector.charCodeAt(selectorIndex);\n                            var sectionEnd = selectorIndex + 1;\n                            while(sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))){\n                                sectionEnd += 1;\n                            }\n                            if (selector.charCodeAt(sectionEnd) !== quote) {\n                                throw new Error(\"Attribute value didn't end\");\n                            }\n                            value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                            selectorIndex = sectionEnd + 1;\n                        } else {\n                            var valueStart = selectorIndex;\n                            while(selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */  || isEscaped(selectorIndex))){\n                                selectorIndex += 1;\n                            }\n                            value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                        }\n                        stripWhitespace(0);\n                        // See if we have a force ignore flag\n                        var forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                        // If the forceIgnore flag is set (either `i` or `s`), use that value\n                        if (forceIgnore === 115 /* LowerS */ ) {\n                            ignoreCase = false;\n                            stripWhitespace(1);\n                        } else if (forceIgnore === 105 /* LowerI */ ) {\n                            ignoreCase = true;\n                            stripWhitespace(1);\n                        }\n                    }\n                    if (selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */ ) {\n                        throw new Error(\"Attribute selector didn't terminate\");\n                    }\n                    selectorIndex += 1;\n                    var attributeSelector = {\n                        type: types_1.SelectorType.Attribute,\n                        name: name_1,\n                        action: action,\n                        value: value,\n                        namespace: namespace,\n                        ignoreCase: ignoreCase\n                    };\n                    tokens.push(attributeSelector);\n                    break;\n                }\n            case 58 /* Colon */ :\n                {\n                    if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */ ) {\n                        tokens.push({\n                            type: types_1.SelectorType.PseudoElement,\n                            name: getName(2).toLowerCase(),\n                            data: selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  ? readValueWithParenthesis() : null\n                        });\n                        continue;\n                    }\n                    var name_2 = getName(1).toLowerCase();\n                    var data = null;\n                    if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */ ) {\n                        if (unpackPseudos.has(name_2)) {\n                            if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                                throw new Error(\"Pseudo-selector \".concat(name_2, \" cannot be quoted\"));\n                            }\n                            data = [];\n                            selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                            if (selector.charCodeAt(selectorIndex) !== 41 /* RightParenthesis */ ) {\n                                throw new Error(\"Missing closing parenthesis in :\".concat(name_2, \" (\").concat(selector, \")\"));\n                            }\n                            selectorIndex += 1;\n                        } else {\n                            data = readValueWithParenthesis();\n                            if (stripQuotesFromPseudos.has(name_2)) {\n                                var quot = data.charCodeAt(0);\n                                if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {\n                                    data = data.slice(1, -1);\n                                }\n                            }\n                            data = unescapeCSS(data);\n                        }\n                    }\n                    tokens.push({\n                        type: types_1.SelectorType.Pseudo,\n                        name: name_2,\n                        data: data\n                    });\n                    break;\n                }\n            case 44 /* Comma */ :\n                {\n                    finalizeSubselector();\n                    tokens = [];\n                    stripWhitespace(1);\n                    break;\n                }\n            default:\n                {\n                    if (selector.startsWith(\"/*\", selectorIndex)) {\n                        var endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                        if (endIndex < 0) {\n                            throw new Error(\"Comment was not terminated\");\n                        }\n                        selectorIndex = endIndex + 2;\n                        // Remove leading whitespace\n                        if (tokens.length === 0) {\n                            stripWhitespace(0);\n                        }\n                        break;\n                    }\n                    var namespace = null;\n                    var name_3 = void 0;\n                    if (firstChar === 42 /* Asterisk */ ) {\n                        selectorIndex += 1;\n                        name_3 = \"*\";\n                    } else if (firstChar === 124 /* Pipe */ ) {\n                        name_3 = \"\";\n                        if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */ ) {\n                            addTraversal(types_1.SelectorType.ColumnCombinator);\n                            stripWhitespace(2);\n                            break;\n                        }\n                    } else if (reName.test(selector.slice(selectorIndex))) {\n                        name_3 = getName(0);\n                    } else {\n                        break loop;\n                    }\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */ ) {\n                        namespace = name_3;\n                        if (selector.charCodeAt(selectorIndex + 1) === 42 /* Asterisk */ ) {\n                            name_3 = \"*\";\n                            selectorIndex += 2;\n                        } else {\n                            name_3 = getName(1);\n                        }\n                    }\n                    tokens.push(name_3 === \"*\" ? {\n                        type: types_1.SelectorType.Universal,\n                        namespace: namespace\n                    } : {\n                        type: types_1.SelectorType.Tag,\n                        name: name_3,\n                        namespace: namespace\n                    });\n                }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/css-what/lib/commonjs/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/css-what/lib/commonjs/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/css-what/lib/commonjs/stringify.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.stringify = void 0;\nvar types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/css-what/lib/commonjs/types.js\");\nvar attribValChars = [\n    \"\\\\\",\n    '\"'\n];\nvar pseudoValChars = __spreadArray(__spreadArray([], attribValChars, true), [\n    \"(\",\n    \")\"\n], false);\nvar charsToEscapeInAttributeValue = new Set(attribValChars.map(function(c) {\n    return c.charCodeAt(0);\n}));\nvar charsToEscapeInPseudoValue = new Set(pseudoValChars.map(function(c) {\n    return c.charCodeAt(0);\n}));\nvar charsToEscapeInName = new Set(__spreadArray(__spreadArray([], pseudoValChars, true), [\n    \"~\",\n    \"^\",\n    \"$\",\n    \"*\",\n    \"+\",\n    \"!\",\n    \"|\",\n    \":\",\n    \"[\",\n    \"]\",\n    \" \",\n    \".\"\n], false).map(function(c) {\n    return c.charCodeAt(0);\n}));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */ function stringify(selector) {\n    return selector.map(function(token) {\n        return token.map(stringifyToken).join(\"\");\n    }).join(\", \");\n}\nexports.stringify = stringify;\nfunction stringifyToken(token, index, arr) {\n    switch(token.type){\n        // Simple types\n        case types_1.SelectorType.Child:\n            return index === 0 ? \"> \" : \" > \";\n        case types_1.SelectorType.Parent:\n            return index === 0 ? \"< \" : \" < \";\n        case types_1.SelectorType.Sibling:\n            return index === 0 ? \"~ \" : \" ~ \";\n        case types_1.SelectorType.Adjacent:\n            return index === 0 ? \"+ \" : \" + \";\n        case types_1.SelectorType.Descendant:\n            return \" \";\n        case types_1.SelectorType.ColumnCombinator:\n            return index === 0 ? \"|| \" : \" || \";\n        case types_1.SelectorType.Universal:\n            // Return an empty string if the selector isn't needed.\n            return token.namespace === \"*\" && index + 1 < arr.length && \"name\" in arr[index + 1] ? \"\" : \"\".concat(getNamespace(token.namespace), \"*\");\n        case types_1.SelectorType.Tag:\n            return getNamespacedName(token);\n        case types_1.SelectorType.PseudoElement:\n            return \"::\".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? \"\" : \"(\".concat(escapeName(token.data, charsToEscapeInPseudoValue), \")\"));\n        case types_1.SelectorType.Pseudo:\n            return \":\".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? \"\" : \"(\".concat(typeof token.data === \"string\" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data), \")\"));\n        case types_1.SelectorType.Attribute:\n            {\n                if (token.name === \"id\" && token.action === types_1.AttributeAction.Equals && token.ignoreCase === \"quirks\" && !token.namespace) {\n                    return \"#\".concat(escapeName(token.value, charsToEscapeInName));\n                }\n                if (token.name === \"class\" && token.action === types_1.AttributeAction.Element && token.ignoreCase === \"quirks\" && !token.namespace) {\n                    return \".\".concat(escapeName(token.value, charsToEscapeInName));\n                }\n                var name_1 = getNamespacedName(token);\n                if (token.action === types_1.AttributeAction.Exists) {\n                    return \"[\".concat(name_1, \"]\");\n                }\n                return \"[\".concat(name_1).concat(getActionValue(token.action), '=\"').concat(escapeName(token.value, charsToEscapeInAttributeValue), '\"').concat(token.ignoreCase === null ? \"\" : token.ignoreCase ? \" i\" : \" s\", \"]\");\n            }\n    }\n}\nfunction getActionValue(action) {\n    switch(action){\n        case types_1.AttributeAction.Equals:\n            return \"\";\n        case types_1.AttributeAction.Element:\n            return \"~\";\n        case types_1.AttributeAction.Start:\n            return \"^\";\n        case types_1.AttributeAction.End:\n            return \"$\";\n        case types_1.AttributeAction.Any:\n            return \"*\";\n        case types_1.AttributeAction.Not:\n            return \"!\";\n        case types_1.AttributeAction.Hyphen:\n            return \"|\";\n        case types_1.AttributeAction.Exists:\n            throw new Error(\"Shouldn't be here\");\n    }\n}\nfunction getNamespacedName(token) {\n    return \"\".concat(getNamespace(token.namespace)).concat(escapeName(token.name, charsToEscapeInName));\n}\nfunction getNamespace(namespace) {\n    return namespace !== null ? \"\".concat(namespace === \"*\" ? \"*\" : escapeName(namespace, charsToEscapeInName), \"|\") : \"\";\n}\nfunction escapeName(str, charsToEscape) {\n    var lastIdx = 0;\n    var ret = \"\";\n    for(var i = 0; i < str.length; i++){\n        if (charsToEscape.has(str.charCodeAt(i))) {\n            ret += \"\".concat(str.slice(lastIdx, i), \"\\\\\").concat(str.charAt(i));\n            lastIdx = i + 1;\n        }\n    }\n    return ret.length > 0 ? ret + str.slice(lastIdx) : str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/css-what/lib/commonjs/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/css-what/lib/commonjs/types.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-what/lib/commonjs/types.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AttributeAction = exports.IgnoreCaseMode = exports.SelectorType = void 0;\nvar SelectorType;\n(function(SelectorType) {\n    SelectorType[\"Attribute\"] = \"attribute\";\n    SelectorType[\"Pseudo\"] = \"pseudo\";\n    SelectorType[\"PseudoElement\"] = \"pseudo-element\";\n    SelectorType[\"Tag\"] = \"tag\";\n    SelectorType[\"Universal\"] = \"universal\";\n    // Traversals\n    SelectorType[\"Adjacent\"] = \"adjacent\";\n    SelectorType[\"Child\"] = \"child\";\n    SelectorType[\"Descendant\"] = \"descendant\";\n    SelectorType[\"Parent\"] = \"parent\";\n    SelectorType[\"Sibling\"] = \"sibling\";\n    SelectorType[\"ColumnCombinator\"] = \"column-combinator\";\n})(SelectorType = exports.SelectorType || (exports.SelectorType = {}));\n/**\n * Modes for ignore case.\n *\n * This could be updated to an enum, and the object is\n * the current stand-in that will allow code to be updated\n * without big changes.\n */ exports.IgnoreCaseMode = {\n    Unknown: null,\n    QuirksMode: \"quirks\",\n    IgnoreCase: true,\n    CaseSensitive: false\n};\nvar AttributeAction;\n(function(AttributeAction) {\n    AttributeAction[\"Any\"] = \"any\";\n    AttributeAction[\"Element\"] = \"element\";\n    AttributeAction[\"End\"] = \"end\";\n    AttributeAction[\"Equals\"] = \"equals\";\n    AttributeAction[\"Exists\"] = \"exists\";\n    AttributeAction[\"Hyphen\"] = \"hyphen\";\n    AttributeAction[\"Not\"] = \"not\";\n    AttributeAction[\"Start\"] = \"start\";\n})(AttributeAction = exports.AttributeAction || (exports.AttributeAction = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY3NzLXdoYXQvbGliL2NvbW1vbmpzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBR0Esc0JBQXNCLEdBQUdBLG9CQUFvQixHQUFHLEtBQUs7QUFDL0UsSUFBSUk7QUFDSCxVQUFVQSxZQUFZO0lBQ25CQSxZQUFZLENBQUMsWUFBWSxHQUFHO0lBQzVCQSxZQUFZLENBQUMsU0FBUyxHQUFHO0lBQ3pCQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUc7SUFDaENBLFlBQVksQ0FBQyxNQUFNLEdBQUc7SUFDdEJBLFlBQVksQ0FBQyxZQUFZLEdBQUc7SUFDNUIsYUFBYTtJQUNiQSxZQUFZLENBQUMsV0FBVyxHQUFHO0lBQzNCQSxZQUFZLENBQUMsUUFBUSxHQUFHO0lBQ3hCQSxZQUFZLENBQUMsYUFBYSxHQUFHO0lBQzdCQSxZQUFZLENBQUMsU0FBUyxHQUFHO0lBQ3pCQSxZQUFZLENBQUMsVUFBVSxHQUFHO0lBQzFCQSxZQUFZLENBQUMsbUJBQW1CLEdBQUc7QUFDdkMsR0FBR0EsZUFBZUosUUFBUUksWUFBWSxJQUFLSixDQUFBQSxvQkFBb0IsR0FBRyxDQUFDO0FBQ25FOzs7Ozs7Q0FNQyxHQUNEQSxzQkFBc0IsR0FBRztJQUNyQkssU0FBUztJQUNUQyxZQUFZO0lBQ1pDLFlBQVk7SUFDWkMsZUFBZTtBQUNuQjtBQUNBLElBQUlOO0FBQ0gsVUFBVUEsZUFBZTtJQUN0QkEsZUFBZSxDQUFDLE1BQU0sR0FBRztJQUN6QkEsZUFBZSxDQUFDLFVBQVUsR0FBRztJQUM3QkEsZUFBZSxDQUFDLE1BQU0sR0FBRztJQUN6QkEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1QkEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1QkEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1QkEsZUFBZSxDQUFDLE1BQU0sR0FBRztJQUN6QkEsZUFBZSxDQUFDLFFBQVEsR0FBRztBQUMvQixHQUFHQSxrQkFBa0JGLFFBQVFFLGVBQWUsSUFBS0YsQ0FBQUEsdUJBQXVCLEdBQUcsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9jc3Mtd2hhdC9saWIvY29tbW9uanMvdHlwZXMuanM/OThjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXR0cmlidXRlQWN0aW9uID0gZXhwb3J0cy5JZ25vcmVDYXNlTW9kZSA9IGV4cG9ydHMuU2VsZWN0b3JUeXBlID0gdm9pZCAwO1xudmFyIFNlbGVjdG9yVHlwZTtcbihmdW5jdGlvbiAoU2VsZWN0b3JUeXBlKSB7XG4gICAgU2VsZWN0b3JUeXBlW1wiQXR0cmlidXRlXCJdID0gXCJhdHRyaWJ1dGVcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJQc2V1ZG9cIl0gPSBcInBzZXVkb1wiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlBzZXVkb0VsZW1lbnRcIl0gPSBcInBzZXVkby1lbGVtZW50XCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiVGFnXCJdID0gXCJ0YWdcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJVbml2ZXJzYWxcIl0gPSBcInVuaXZlcnNhbFwiO1xuICAgIC8vIFRyYXZlcnNhbHNcbiAgICBTZWxlY3RvclR5cGVbXCJBZGphY2VudFwiXSA9IFwiYWRqYWNlbnRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJDaGlsZFwiXSA9IFwiY2hpbGRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJEZXNjZW5kYW50XCJdID0gXCJkZXNjZW5kYW50XCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiUGFyZW50XCJdID0gXCJwYXJlbnRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJTaWJsaW5nXCJdID0gXCJzaWJsaW5nXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiQ29sdW1uQ29tYmluYXRvclwiXSA9IFwiY29sdW1uLWNvbWJpbmF0b3JcIjtcbn0pKFNlbGVjdG9yVHlwZSA9IGV4cG9ydHMuU2VsZWN0b3JUeXBlIHx8IChleHBvcnRzLlNlbGVjdG9yVHlwZSA9IHt9KSk7XG4vKipcbiAqIE1vZGVzIGZvciBpZ25vcmUgY2FzZS5cbiAqXG4gKiBUaGlzIGNvdWxkIGJlIHVwZGF0ZWQgdG8gYW4gZW51bSwgYW5kIHRoZSBvYmplY3QgaXNcbiAqIHRoZSBjdXJyZW50IHN0YW5kLWluIHRoYXQgd2lsbCBhbGxvdyBjb2RlIHRvIGJlIHVwZGF0ZWRcbiAqIHdpdGhvdXQgYmlnIGNoYW5nZXMuXG4gKi9cbmV4cG9ydHMuSWdub3JlQ2FzZU1vZGUgPSB7XG4gICAgVW5rbm93bjogbnVsbCxcbiAgICBRdWlya3NNb2RlOiBcInF1aXJrc1wiLFxuICAgIElnbm9yZUNhc2U6IHRydWUsXG4gICAgQ2FzZVNlbnNpdGl2ZTogZmFsc2UsXG59O1xudmFyIEF0dHJpYnV0ZUFjdGlvbjtcbihmdW5jdGlvbiAoQXR0cmlidXRlQWN0aW9uKSB7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiQW55XCJdID0gXCJhbnlcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJFbGVtZW50XCJdID0gXCJlbGVtZW50XCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiRW5kXCJdID0gXCJlbmRcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJFcXVhbHNcIl0gPSBcImVxdWFsc1wiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkV4aXN0c1wiXSA9IFwiZXhpc3RzXCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiSHlwaGVuXCJdID0gXCJoeXBoZW5cIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJOb3RcIl0gPSBcIm5vdFwiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIlN0YXJ0XCJdID0gXCJzdGFydFwiO1xufSkoQXR0cmlidXRlQWN0aW9uID0gZXhwb3J0cy5BdHRyaWJ1dGVBY3Rpb24gfHwgKGV4cG9ydHMuQXR0cmlidXRlQWN0aW9uID0ge30pKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkF0dHJpYnV0ZUFjdGlvbiIsIklnbm9yZUNhc2VNb2RlIiwiU2VsZWN0b3JUeXBlIiwiVW5rbm93biIsIlF1aXJrc01vZGUiLCJJZ25vcmVDYXNlIiwiQ2FzZVNlbnNpdGl2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/css-what/lib/commonjs/types.js\n");

/***/ })

};
;